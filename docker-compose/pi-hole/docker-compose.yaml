services:
  pihole:
    image: pihole/pihole:latest
    container_name: ${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    healthcheck:
      disable: true
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      # - "80:80/tcp"
    environment:
      - TZ=Europe/Amsterdam
      - DNSMASQ_LISTENING=all
      - FTLCONF_LOCAL_IPV4=${PIHOLE_LAN_IP} # Set to your server's LAN IP, used by web block modes.
      - WEBPASSWORD=${PIHOLE_ADMIN_PASSWORD} # tr -dc 'a-zA-Z0-9' </dev/urandom | head -c 16
    volumes:
      - type: volume
        source: etc
        target: /etc/pihole
        read_only: false
      - type: volume
        source: dnsmasq
        target: /etc/dnsmasq.d
        read_only: false
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    # cap_add:
    #   - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    networks:
      docker-services:
      # guest_bridge_net:
      # iot_bridge_net:
    labels:
      traefik.enable: 'true'
      traefik.docker.network: docker-services
      traefik.http.routers.pihole.entrypoints: websecure
      traefik.http.routers.pihole.rule: Host(`pihole.apps.vwn.io`)
      traefik.http.routers.pihole.tls: 'true'
      traefik.http.routers.pihole.tls.certresolver: porkbun_dns_resolver
      traefik.http.routers.pihole.service: pihole
      traefik.http.services.pihole.loadbalancer.server.port: 80

volumes:
  etc:
  dnsmasq:

# Create a new network for the services to communicate over
#
# $ docker network create \
#   --driver bridge \
#   --opt "com.docker.network.bridge.enable_icc"="true" \
#   --opt "com.docker.network.bridge.enable_ip_masquerade"="true" \
#   --opt "com.docker.network.bridge.host_binding_ipv4"="0.0.0.0" \
#   --opt "com.docker.network.driver.mtu"="1500" \
#   docker-services

# docker network create \
#   -d macvlan \
#   --subnet=10.72.0.0/16 \
#   --gateway=10.72.0.1 \
#   lan_net

# docker network create \
#   -d macvlan \
#   --subnet=10.20.0.0/16 \
#   --gateway=10.20.0.1 \
#   -o parent=eth1 \
#   guest_net

# docker network create \
#   -d macvlan \
#   --subnet=10.30.0.0/16 \
#   --gateway=10.30.0.1 \
#   -o parent=eth2 \
#   iot_net

# $ docker network create \
#   --driver bridge \
#   --opt "com.docker.network.bridge.enable_icc"="true" \
#   --opt "com.docker.network.bridge.enable_ip_masquerade"="true" \
#   --opt "com.docker.network.bridge.host_binding_ipv4"="10.30.99.42" \
#   --opt "com.docker.network.driver.mtu"="1500" \
#   iot_bridge_net

networks:
  docker-services:
    external: true
  # iot_bridge_net:
  #   external: true
