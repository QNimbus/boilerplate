services:
  controller:
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: ${COMPOSE_PROJECT_NAME}_controller
    restart: unless-stopped
    depends_on:
      - db
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
      - MONGO_USER=unifi
      - MONGO_PASS=unifi
      - MONGO_HOST=db
      - MONGO_PORT=27017
      - MONGO_DBNAME=unifi
      - MONGO_AUTHSOURCE=admin
      - MEM_LIMIT=default #optional
      - MEM_STARTUP=default #optional
      - MONGO_TLS= #optional
    volumes:
      - type: volume
        source: config
        target: /config
        read_only: false
    ports:
      - 10.72.200.3:3478:3478/udp
      - 10.72.200.3:10001:10001/udp
      # - 8080:8080 # Web UI & Device adoption (http)
      # - 8443:8443 # Web UI (https)
      # - 8880:8880 # Guest portal (http)
      # - 8843:8843 # Guest portal (https)
      # - 1900:1900/udp # Optional: Used to "Make application discoverable on L2 network" in the UniFi Network settings.
      # - 6789:6789 # Optional: Used for UniFi mobile speed test.
      # - 5514:5514/udp # Optional: Used for remote syslog capture.
    networks:
      - unifi
    labels:
      traefik.enable: 'true'
      traefik.docker.network: unifi
      traefik.http.routers.unifi.entrypoints: websecure
      traefik.http.routers.unifi.rule: Host(`unifi.apps.vwn.io`)
      traefik.http.routers.unifi-guest-portal.entrypoints: unifi-8843
      traefik.http.routers.unifi-guest-portal.rule: Host(`portal.guest.home.vwn.io`)
      traefik.http.routers.unifi-inform.entrypoints: web-alt
      traefik.http.routers.unifi-inform.rule: PathPrefix(`/inform`)
      traefik.http.routers.unifi.tls: 'true'
      traefik.http.routers.unifi-guest-portal.tls: 'true'
      traefik.http.routers.unifi.tls.certresolver: porkbun_dns_resolver
      traefik.http.routers.unifi-guest-portal.tls.certresolver: porkbun_dns_resolver
      traefik.http.routers.unifi.service: unifi
      traefik.http.routers.unifi-guest-portal.service: unifi-guest-portal
      traefik.http.routers.unifi-inform.service: unifi-inform
      traefik.http.services.unifi.loadbalancer.server.port: 8443
      traefik.http.services.unifi-guest-portal.loadbalancer.server.port: 8843
      traefik.http.services.unifi.loadbalancer.server.scheme: https
      traefik.http.services.unifi-guest-portal.loadbalancer.server.scheme: https
      traefik.http.services.unifi-inform.loadbalancer.server.port: 8080
      traefik.http.services.unifi-inform.loadbalancer.server.scheme: http

  db:
    image: docker.io/mongo:8.0.4
    container_name: ${COMPOSE_PROJECT_NAME}_db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_USER=unifi
      - MONGO_PASS=unifi
      - MONGO_DBNAME=unifi
      - MONGO_AUTHSOURCE=admin
    volumes:
      - type: volume
        source: mongo_db
        target: /data/db
        read_only: false
      - type: volume
        source: mongo_db_config
        target: /data/configdb
        read_only: false
      - /root/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
    networks:
      - unifi
    restart: unless-stopped

  logs:
    image: bash
    container_name: ${COMPOSE_PROJECT_NAME}_logs
    depends_on:
      - controller
    command: bash -c 'tail -F /config/logs/*.log'
    volumes:
      - type: volume
        source: config
        target: /config
        read_only: true
    networks:
      - unifi
    restart: unless-stopped

volumes:
  config:
  mongo_db:
  mongo_db_config:

# Create a new network for the services to communicate over
#
# $ sudo docker network create \
#   --driver bridge \
#   --opt "com.docker.network.bridge.enable_icc"="true" \
#   --opt "com.docker.network.bridge.enable_ip_masquerade"="true" \
#   --opt "com.docker.network.bridge.host_binding_ipv4"="0.0.0.0" \
#   --opt "com.docker.network.driver.mtu"="1500" \
#   unifi
#
# networks:
#   unifi:
#     external: true
#     name: unifi

networks:
  unifi:
    external: true
    name: unifi
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.driver.mtu: "1500"
